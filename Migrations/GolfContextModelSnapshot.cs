// <auto-generated />
using System;
using GolfScorePoster.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GolfScorePoster.Migrations
{
    [DbContext(typeof(GolfContext))]
    partial class GolfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Association", b =>
                {
                    b.Property<int>("AssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AssociationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ScoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Associations");
                });

            modelBuilder.Entity("GolfCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CoursePar")
                        .HasColumnType("int");

                    b.Property<int>("CourseRating")
                        .HasColumnType("int");

                    b.Property<int>("CourseSlope")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerScoreScoreId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerUserId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("PlayerScoreScoreId");

                    b.HasIndex("PlayerUserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GolfScore", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePlayed")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NineOrEighteen")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoundScore")
                        .HasColumnType("int");

                    b.Property<string>("TeesPlayed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("User")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.HasIndex("PlayerUserId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Association", b =>
                {
                    b.HasOne("GolfCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfScore", "Score")
                        .WithMany()
                        .HasForeignKey("ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "Player")
                        .WithMany("Associations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Player");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("GolfCourse", b =>
                {
                    b.HasOne("GolfScore", "PlayerScore")
                        .WithMany()
                        .HasForeignKey("PlayerScoreScoreId");

                    b.HasOne("User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerUserId");

                    b.Navigation("Player");

                    b.Navigation("PlayerScore");
                });

            modelBuilder.Entity("GolfScore", b =>
                {
                    b.HasOne("User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerUserId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Associations");
                });
#pragma warning restore 612, 618
        }
    }
}
